var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = ParticleHolography","category":"page"},{"location":"#ParticleHolography","page":"Home","title":"ParticleHolography","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for ParticleHolography.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [ParticleHolography]","category":"page"},{"location":"#ParticleHolography.cu_get_reconst_vol-Tuple{CUDA.CuArray{ComplexF32, 2}, CUDA.CuArray{ComplexF32, 2}, CUDA.CuArray{ComplexF32, 2}, Int64}","page":"Home","title":"ParticleHolography.cu_get_reconst_vol","text":"cu_get_reconst_vol(holo, transfer_front, transfer_dz, slices)\n\nReconstruct the observation volume from the light field light_field using the transfer functions transfer_front and transfer_dz. transfer_front propagates the light field to the front of the volume, and transfer_dz propagates the light field between the slices. slices is the number of slices in the volume.\n\nArguments\n\nlight_field::CuArray{ComplexF32,2}: The light_field to reconstruct. In Gabor's holography, this is the square root of the hologram.\ntransfer_front::CuArray{ComplexF32,2}: The transfer function to propagate the light field to the front of the volume.\ntransfer_dz::CuArray{ComplexF32,2}: The transfer function to propagate the light field between the slices.\nslices::Int: The number of slices in the volume.\n\nReturns\n\nCuArray{Float32,3}: The reconstructed volume.\n\n\n\n\n\n","category":"method"},{"location":"#ParticleHolography.cu_get_reconst_vol_and_xyprojection-Tuple{CUDA.CuArray{ComplexF32, 2}, CUDA.CuArray{ComplexF32, 2}, CUDA.CuArray{ComplexF32, 2}, Int64}","page":"Home","title":"ParticleHolography.cu_get_reconst_vol_and_xyprojection","text":"cu_get_reconst_vol_and_xyprojection(light_field, transfer_front, transfer_dz, slices)\n\nReconstruct the observation volume from the light field light_field and get the XY projection of the volume using the transfer functions transfer_front and transfer_dz. transfer_front propagates the light field to the front of the volume, and transfer_dz propagates the light field between the slices. slices is the number of slices in the volume.\n\nArguments\n\nlight_field::CuArray{ComplexF32,2}: The light_field to reconstruct. In Gabor's holography, this is the square root of the hologram.\ntransfer_front::CuArray{ComplexF32,2}: The transfer function to propagate the light field to the front of the volume.\ntransfer_dz::CuArray{ComplexF32,2}: The transfer function to propagate the light field between the slices.\nslices::Int: The number of slices in the volume.\n\nReturns\n\nCuArray{Float32,3}: The reconstructed volume.\nCuArray{Float32,2}: The XY projection of the reconstructed volume.\n\n\n\n\n\n","category":"method"},{"location":"#ParticleHolography.cu_get_reconst_xyprojectin-Tuple{CUDA.CuArray{ComplexF32, 2}, CUDA.CuArray{ComplexF32, 2}, CUDA.CuArray{ComplexF32, 2}, Int64}","page":"Home","title":"ParticleHolography.cu_get_reconst_xyprojectin","text":"cu_get_reconst_xyprojectin(light_field, transfer_front, transfer_dz, slices)\n\nGet the XY projection of the reconstructed volume from the light field light_field using the transfer functions transfer_front and transfer_dz. transfer_front propagates the light field to the front of the volume, and transfer_dz propagates the light field between the slices. slices is the number of slices in the volume.\n\nArguments\n\nlight_field::CuArray{ComplexF32,2}: The light_field to reconstruct. In Gabor's holography, this is the square root of the hologram.\ntransfer_front::CuArray{ComplexF32,2}: The transfer function to propagate the light field to the front of the volume.\ntransfer_dz::CuArray{ComplexF32,2}: The transfer function to propagate the light field between the slices.\nslices::Int: The number of slices in the volume.\n\nReturns\n\nCuArray{Float32,2}: The XY projection of the reconstructed volume.\n\n\n\n\n\n","category":"method"},{"location":"#ParticleHolography.cu_phase_retrieval_holo-Tuple{CUDA.CuArray{Float32, 2}, CUDA.CuArray{Float32, 2}, CUDA.CuArray{ComplexF32, 2}, CUDA.CuArray{ComplexF32, 2}, Int64, Int64}","page":"Home","title":"ParticleHolography.cu_phase_retrieval_holo","text":"cu_phase_retrieval_holo(holo1, holo2, transfer, invtransfer, priter, datlen)\n\nPerform the Gerchberg-Saxton algorithm-based phase retrieving on two holograms and return the retrieved light field at the z-coordinate point of holo1. The algorithm is repeated priter times. holo1 and holo2 are the holograms (I = |phi|^2) of the object at two different z-coordinates. transfer and invtransfer are the transfer functions for the propagation from holo1 to holo2 and vice versa. datlen is the size of the holograms.\n\nArguments\n\nholo1::CuArray{Float32,2}: The hologram at the z-cordinate of closer to the object.\nholo2::CuArray{Float32,2}: The hologram at the z-coordinate of further from the object.\ntransfer::CuArray{ComplexF32,2}: The transfer function from holo1 to holo2.\ninvtransfer::CuArray{ComplexF32,2}: The transfer function from holo2 to holo1.\npriter::Int: The number of iterations to perform the algorithm.\ndatlen::Int: The size of the holograms.\n\nReturns\n\nCuArray{ComplexF32,2}: The retrieved light field at the z-coordinate of holo1.\n\n\n\n\n\n","category":"method"},{"location":"#ParticleHolography.cu_transfer-Tuple{AbstractFloat, Int64, AbstractFloat, CUDA.CuArray{Float32, 2}}","page":"Home","title":"ParticleHolography.cu_transfer","text":"cu_transfer(z0, datLen, wavLen, d_sqr)\n\nCreate a CuArray of size datLen x datLen with the values of the transfer function for a given propagated distance z0. d_sqr can be obtained with cutransfersqrtarr(datlen, wavlen, dx).\n\nArguments\n\nz0::AbstractFloat: The distance to propagate the wave.\ndatLen::Int: The size of the CuArray.\nwavLen::AbstractFloat: The wavelength of the light.\nd_sqr::CuArray{Float32,2}: The square of the distance from the center of the hologram, obtained with cutransfersqrtarr(datlen, wavlen, dx).\n\nReturns\n\nCuArray{ComplexF32,2}: The transfer function for the propagation.\n\n\n\n\n\n","category":"method"},{"location":"#ParticleHolography.cu_transfer_sqrt_arr-Tuple{Int64, AbstractFloat, AbstractFloat}","page":"Home","title":"ParticleHolography.cu_transfer_sqrt_arr","text":"cu_transfer_sqrt_arr(datlen, wavlen, dx)\n\nCreate a CuArray of size datlen x datlen with the values of the square-root part of the transfer function.\n\nArguments\n\ndatlen::Int: The size of the CuArray.\nwavlen::AbstractFloat: The wavelength of the light.\ndx::AbstractFloat: The pixel size of the hologram.\n\nReturns\n\nCuArray{Float32,2}: The square-root part of the transfer function.\n\n\n\n\n\n","category":"method"},{"location":"#ParticleHolography.cvgray2floatimg-Tuple{Any}","page":"Home","title":"ParticleHolography.cvgray2floatimg","text":"cvgray2floatimg(img)\n\nConvert a OpenCV capable image to a Array{Float32, 2} image.\n\nArguments\n\nimg::Array{N0f8, 3}: The image to convert.\n\nReturns\n\nArray{Float32, 2}: The image as a Float32 array.\n\n\n\n\n\n","category":"method"},{"location":"#ParticleHolography.find_external_contours-Tuple{Any}","page":"Home","title":"ParticleHolography.find_external_contours","text":"find_external_contours(image)\n\nFinds non-hole contours in binary images. Equivalent to CVRETREXTERNAL and CVCHAINAPPROX_NONE modes of the findContours() function provided in OpenCV.\n\nArguments\n\nimage: The binary image. \n\nReturns\n\nVector{Vector{CartesianIndex}}: A vector of contours. Each contour is a vector of CartesianIndex.\n\n\n\n\n\n","category":"method"},{"location":"#ParticleHolography.floatimg2cvgray-Tuple{Matrix{Float32}}","page":"Home","title":"ParticleHolography.floatimg2cvgray","text":"floatimg2cvgray(img)\n\nConvert a Array{Float32, 2} image to a OpenCV capable image.\n\nArguments\n\nimg::Array{Float32, 2}: The image to convert.\n\nReturns\n\nArray{N0f8, 3}: The image as a OpenCV capable image.\n\n\n\n\n\n","category":"method"},{"location":"#ParticleHolography.load_gray2float-Tuple{String}","page":"Home","title":"ParticleHolography.load_gray2float","text":"load_gray2float(path)\n\nLoad a grayscale image from a file and return it as a Array{Float32, 2} array.\n\nArguments\n\npath::String: The path to the image file.\n\nReturns\n\nArray{Float32, 2}: The image as a Float32 array.\n\n\n\n\n\n","category":"method"}]
}
