var documenterSearchIndex = {"docs":
[{"location":"reference/#Reference","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"This is the reference documentation for the ParticleHolography package.","category":"page"},{"location":"reference/#Index","page":"Reference","title":"Index","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"Pages = [\"reference.md\"]","category":"page"},{"location":"reference/#Functions","page":"Reference","title":"Functions","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"Modules = [ParticleHolography]","category":"page"},{"location":"reference/#ParticleHolography.cu_get_reconst_vol-Tuple{CUDA.CuArray{ComplexF32, 2}, CUDA.CuArray{ComplexF32, 2}, CUDA.CuArray{ComplexF32, 2}, Int64}","page":"Reference","title":"ParticleHolography.cu_get_reconst_vol","text":"cu_get_reconst_vol(holo, transfer_front, transfer_dz, slices)\n\nReconstruct the observation volume from the light field light_field using the transfer functions transfer_front and transfer_dz. transfer_front propagates the light field to the front of the volume, and transfer_dz propagates the light field between the slices. slices is the number of slices in the volume.\n\nArguments\n\nlight_field::CuArray{ComplexF32,2}: The light_field to reconstruct. In Gabor's holography, this is the square root of the hologram.\ntransfer_front::CuArray{ComplexF32,2}: The transfer function to propagate the light field to the front of the volume.\ntransfer_dz::CuArray{ComplexF32,2}: The transfer function to propagate the light field between the slices.\nslices::Int: The number of slices in the volume.\n\nReturns\n\nCuArray{Float32,3}: The reconstructed volume.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ParticleHolography.cu_get_reconst_vol_and_xyprojection-Tuple{CUDA.CuArray{ComplexF32, 2}, CUDA.CuArray{ComplexF32, 2}, CUDA.CuArray{ComplexF32, 2}, Int64}","page":"Reference","title":"ParticleHolography.cu_get_reconst_vol_and_xyprojection","text":"cu_get_reconst_vol_and_xyprojection(light_field, transfer_front, transfer_dz, slices)\n\nReconstruct the observation volume from the light field light_field and get the XY projection of the volume using the transfer functions transfer_front and transfer_dz. transfer_front propagates the light field to the front of the volume, and transfer_dz propagates the light field between the slices. slices is the number of slices in the volume.\n\nArguments\n\nlight_field::CuArray{ComplexF32,2}: The light_field to reconstruct. In Gabor's holography, this is the square root of the hologram.\ntransfer_front::CuArray{ComplexF32,2}: The transfer function to propagate the light field to the front of the volume.\ntransfer_dz::CuArray{ComplexF32,2}: The transfer function to propagate the light field between the slices.\nslices::Int: The number of slices in the volume.\n\nReturns\n\nCuArray{Float32,3}: The reconstructed volume.\nCuArray{Float32,2}: The XY projection of the reconstructed volume.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ParticleHolography.cu_get_reconst_xyprojection-Tuple{CUDA.CuArray{ComplexF32, 2}, CUDA.CuArray{ComplexF32, 2}, CUDA.CuArray{ComplexF32, 2}, Int64}","page":"Reference","title":"ParticleHolography.cu_get_reconst_xyprojection","text":"cu_get_reconst_xyprojectin(light_field, transfer_front, transfer_dz, slices)\n\nGet the XY projection of the reconstructed volume from the light field light_field using the transfer functions transfer_front and transfer_dz. transfer_front propagates the light field to the front of the volume, and transfer_dz propagates the light field between the slices. slices is the number of slices in the volume.\n\nArguments\n\nlight_field::CuArray{ComplexF32,2}: The light_field to reconstruct. In Gabor's holography, this is the square root of the hologram.\ntransfer_front::CuArray{ComplexF32,2}: The transfer function to propagate the light field to the front of the volume.\ntransfer_dz::CuArray{ComplexF32,2}: The transfer function to propagate the light field between the slices.\nslices::Int: The number of slices in the volume.\n\nReturns\n\nCuArray{Float32,2}: The XY projection of the reconstructed volume.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ParticleHolography.cu_phase_retrieval_holo-Tuple{CUDA.CuArray{Float32, 2}, CUDA.CuArray{Float32, 2}, CUDA.CuArray{ComplexF32, 2}, CUDA.CuArray{ComplexF32, 2}, Int64, Int64}","page":"Reference","title":"ParticleHolography.cu_phase_retrieval_holo","text":"cu_phase_retrieval_holo(holo1, holo2, transfer, invtransfer, priter, datlen)\n\nPerform the Gerchberg-Saxton algorithm-based phase retrieving on two holograms and return the retrieved light field at the z-coordinate point of holo1. The algorithm is repeated priter times. holo1 and holo2 are the holograms (I = |phi|^2) of the object at two different z-coordinates. transfer and invtransfer are the transfer functions for the propagation from holo1 to holo2 and vice versa. datlen is the size of the holograms.\n\nArguments\n\nholo1::CuArray{Float32,2}: The hologram at the z-cordinate of closer to the object.\nholo2::CuArray{Float32,2}: The hologram at the z-coordinate of further from the object.\ntransfer::CuArray{ComplexF32,2}: The transfer function from holo1 to holo2.\ninvtransfer::CuArray{ComplexF32,2}: The transfer function from holo2 to holo1.\npriter::Int: The number of iterations to perform the algorithm.\ndatlen::Int: The size of the holograms.\n\nReturns\n\nCuArray{ComplexF32,2}: The retrieved light field at the z-coordinate of holo1.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ParticleHolography.cu_transfer-Tuple{AbstractFloat, Int64, AbstractFloat, CUDA.CuArray{Float32, 2}}","page":"Reference","title":"ParticleHolography.cu_transfer","text":"cu_transfer(z0, datLen, wavLen, d_sqr)\n\nCreate a CuArray of size datLen x datLen with the values of the transfer function for a given propagated distance z0. d_sqr can be obtained with cutransfersqrtarr(datlen, wavlen, dx).\n\nArguments\n\nz0::AbstractFloat: The distance to propagate the wave.\ndatLen::Int: The size of the CuArray.\nwavLen::AbstractFloat: The wavelength of the light.\nd_sqr::CuArray{Float32,2}: The square of the distance from the center of the hologram, obtained with cutransfersqrtarr(datlen, wavlen, dx).\n\nReturns\n\nCuArray{ComplexF32,2}: The transfer function for the propagation.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ParticleHolography.cu_transfer_sqrt_arr-Tuple{Int64, AbstractFloat, AbstractFloat}","page":"Reference","title":"ParticleHolography.cu_transfer_sqrt_arr","text":"cu_transfer_sqrt_arr(datlen, wavlen, dx)\n\nCreate a CuArray of size datlen x datlen with the values of the square-root part of the transfer function.\n\nArguments\n\ndatlen::Int: The size of the CuArray.\nwavlen::AbstractFloat: The wavelength of the light.\ndx::AbstractFloat: The pixel size of the hologram.\n\nReturns\n\nCuArray{Float32,2}: The square-root part of the transfer function.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ParticleHolography.cvgray2floatimg-Tuple{Any}","page":"Reference","title":"ParticleHolography.cvgray2floatimg","text":"cvgray2floatimg(img)\n\nConvert a OpenCV capable image to a Array{Float32, 2} image.\n\nArguments\n\nimg::Array{N0f8, 3}: The image to convert.\n\nReturns\n\nArray{Float32, 2}: The image as a Float32 array.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ParticleHolography.find_external_contours-Tuple{Any}","page":"Reference","title":"ParticleHolography.find_external_contours","text":"find_external_contours(image)\n\nFinds non-hole contours in binary images. Equivalent to CVRETREXTERNAL and CVCHAINAPPROX_NONE modes of the findContours() function provided in OpenCV.\n\nArguments\n\nimage: The binary image. \n\nReturns\n\nVector{Vector{CartesianIndex}}: A vector of contours. Each contour is a vector of CartesianIndex.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ParticleHolography.floatimg2cvgray-Tuple{Matrix{Float32}}","page":"Reference","title":"ParticleHolography.floatimg2cvgray","text":"floatimg2cvgray(img)\n\nConvert a Array{Float32, 2} image to a OpenCV capable image.\n\nArguments\n\nimg::Array{Float32, 2}: The image to convert.\n\nReturns\n\nArray{N0f8, 3}: The image as a OpenCV capable image.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ParticleHolography.load_gray2float-Tuple{String}","page":"Reference","title":"ParticleHolography.load_gray2float","text":"load_gray2float(path)\n\nLoad a grayscale image from a file and return it as a Array{Float32, 2} array.\n\nArguments\n\npath::String: The path to the image file.\n\nReturns\n\nArray{Float32, 2}: The image as a Float32 array.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = ParticleHolography","category":"page"},{"location":"#ParticleHolography","page":"Home","title":"ParticleHolography","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for ParticleHolography.","category":"page"},{"location":"","page":"Home","title":"Home","text":"A package for particle measurement using inline holography.","category":"page"},{"location":"","page":"Home","title":"Home","text":"note: Note\nThis package is under development, and none of the functions are guaranteed to work.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(url=\"https://github.com/dainakai/ParticleHolography.jl.git\")","category":"page"},{"location":"#Quick-Demonstration","page":"Home","title":"Quick Demonstration","text":"","category":"section"},{"location":"#GPU-accelerated-Gabor-reconstruction","page":"Home","title":"GPU-accelerated Gabor reconstruction","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The code below is an example of performing inline holographic reconstruction using an NVIDIA GPU (CUDA.jl). Your computer needs to be ready to use NVIDIA GPUs with CUDA.jl. It reconstructs a volume of size datlenΔx x datlenΔx x slicesΔz when the camera plane is considered as the xy plane and the direction perpendicular to the camera plane, which is the optical axis, is the z axis. Furthermore, it creates an xy projection image of the reconstructed volume by taking the minimum value of the z axis profile at each pixel in the xy plane of the reconstructed volume. The operation of extracting the xy projection image from the volume can be expressed by the following equation:","category":"page"},{"location":"","page":"Home","title":"Home","text":"mathrmxyproj(x y) = min_z left mathrmrcstvol(x y z) right","category":"page"},{"location":"","page":"Home","title":"Home","text":"Specify the hologram you want to reconstruct and the parameters, and save the projection image as xyprojection.png. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"using ParticleHolography\nusing CUDA\nusing Images\n\n# Load hologram\nimg = load_gray2float(\"holo.png\")\n\n# Parameters\nλ = 0.6328 # Wavelength [μm] \nΔx = 10.0 # Pixel size [μm]\nz0 = 220000.0 # Optical distance between the hologram and the front surface of the reconstruction volume [μm]\nΔz = 100.0 # Optical distance between the reconstructed slices [μm]\ndatlen = 1024 # Data length\nslices = 500 # Number of slices\n\n# Prepare the transfer functions\nd_sqr = cu_transfer_sqrt_arr(datlen, λ, Δx)\nd_tf = cu_transfer(z0, datlen, λ, d_sqr)\nd_slice = cu_transfer(Δz, datlen, λ, d_sqr)\n\n# Reconstruction\nd_xyproj = cu_get_reconst_xyprojection(cu(ComplexF32.(sqrt.(img))), d_tf, d_slice, slices)\n\n# Save the result\nsave(\"xyprojection.png\", Array(d_xyproj)) # Copy the d_xyproj to host memory with Array()","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: holo.png)","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: xyprojection.png)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"index.md\"]\nOrder = [:function]","category":"page"},{"location":"","page":"Home","title":"Home","text":"load_gray2float\ncu_transfer_sqrt_arr\ncu_transfer\ncu_get_reconst_xyprojection","category":"page"},{"location":"#ParticleHolography.load_gray2float","page":"Home","title":"ParticleHolography.load_gray2float","text":"load_gray2float(path)\n\nLoad a grayscale image from a file and return it as a Array{Float32, 2} array.\n\nArguments\n\npath::String: The path to the image file.\n\nReturns\n\nArray{Float32, 2}: The image as a Float32 array.\n\n\n\n\n\n","category":"function"},{"location":"#ParticleHolography.cu_transfer_sqrt_arr","page":"Home","title":"ParticleHolography.cu_transfer_sqrt_arr","text":"cu_transfer_sqrt_arr(datlen, wavlen, dx)\n\nCreate a CuArray of size datlen x datlen with the values of the square-root part of the transfer function.\n\nArguments\n\ndatlen::Int: The size of the CuArray.\nwavlen::AbstractFloat: The wavelength of the light.\ndx::AbstractFloat: The pixel size of the hologram.\n\nReturns\n\nCuArray{Float32,2}: The square-root part of the transfer function.\n\n\n\n\n\n","category":"function"},{"location":"#ParticleHolography.cu_transfer","page":"Home","title":"ParticleHolography.cu_transfer","text":"cu_transfer(z0, datLen, wavLen, d_sqr)\n\nCreate a CuArray of size datLen x datLen with the values of the transfer function for a given propagated distance z0. d_sqr can be obtained with cutransfersqrtarr(datlen, wavlen, dx).\n\nArguments\n\nz0::AbstractFloat: The distance to propagate the wave.\ndatLen::Int: The size of the CuArray.\nwavLen::AbstractFloat: The wavelength of the light.\nd_sqr::CuArray{Float32,2}: The square of the distance from the center of the hologram, obtained with cutransfersqrtarr(datlen, wavlen, dx).\n\nReturns\n\nCuArray{ComplexF32,2}: The transfer function for the propagation.\n\n\n\n\n\n","category":"function"},{"location":"#ParticleHolography.cu_get_reconst_xyprojection","page":"Home","title":"ParticleHolography.cu_get_reconst_xyprojection","text":"cu_get_reconst_xyprojectin(light_field, transfer_front, transfer_dz, slices)\n\nGet the XY projection of the reconstructed volume from the light field light_field using the transfer functions transfer_front and transfer_dz. transfer_front propagates the light field to the front of the volume, and transfer_dz propagates the light field between the slices. slices is the number of slices in the volume.\n\nArguments\n\nlight_field::CuArray{ComplexF32,2}: The light_field to reconstruct. In Gabor's holography, this is the square root of the hologram.\ntransfer_front::CuArray{ComplexF32,2}: The transfer function to propagate the light field to the front of the volume.\ntransfer_dz::CuArray{ComplexF32,2}: The transfer function to propagate the light field between the slices.\nslices::Int: The number of slices in the volume.\n\nReturns\n\nCuArray{Float32,2}: The XY projection of the reconstructed volume.\n\n\n\n\n\n","category":"function"},{"location":"#CPU-based-reconstruction","page":"Home","title":"CPU-based reconstruction","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Preparing...","category":"page"}]
}
